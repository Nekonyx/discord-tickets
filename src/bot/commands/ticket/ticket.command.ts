import {
  ApplicationCommandOptionType,
  CommandInteraction,
  channelMention,
  ThreadChannel,
  EmbedBuilder,
  userMention,
  codeBlock
} from 'discord.js'
import { SlashOption, SlashGroup, Discord, Slash } from 'discordx'
import discordTranscripts from 'discord-html-transcripts'

import { ticketAutocomplete, timestamp, dateToStr } from '../../utils'
import { TicketService } from '../../../services/ticket.service'
import { rootGroupName } from './constants'
import { Color } from '../../../constants'

const ACTIVE = 'üìù'
const CLOSED = 'üîí'

@SlashGroup(rootGroupName)
@SlashGroup({
  description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞–º–∏',
  name: rootGroupName
})
@Discord()
export class TicketCommand {
  private readonly ticketService = new TicketService()

  @Slash({
    description: '–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Ç–∏–∫–µ—Ç–∞',
    name: 'transcript'
  })
  public async transcript(
    @SlashOption({
      autocomplete: (i) => ticketAutocomplete(i, { returnChannel: true }),
      type: ApplicationCommandOptionType.String,
      description: 'ID —Ç–∏–∫–µ—Ç–∞',
      required: false,
      name: 'id'
    })
    id: string | null,
    interaction: CommandInteraction
  ) {
    const channel = await interaction.guild?.channels.fetch(id || interaction.channelId)

    if (!channel || !channel.isTextBased()) {
      return interaction.followUp({
        content: `–ö–∞–Ω–∞–ª ${id || interaction.channelId} –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π`
      })
    }

    const transcript = await discordTranscripts.createTranscript(channel, {
      filename: `${channel.name}_${dateToStr()}.html`,
      poweredBy: false, // remove author from footer
      saveImages: true, // encode all images in base64 instead of referencing to discord
      footerText: ' ', // remove footer ('' doesn't work)
      hydrate: true // inject 3rd party script right into file instead of referencing to CDN
    })
    interaction.reply({ files: [transcript] })
  }

  @Slash({
    description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤',
    name: 'list'
  })
  public async list(
    @SlashOption({
      description: 'ID —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–∞–Ω–∞–ª–∞, –∏–ª–∏ —Ç–∏–∫–µ—Ç–∞',
      autocomplete: (i) => ticketAutocomplete(i),
      type: ApplicationCommandOptionType.String,
      required: true,
      name: 'id'
    })
    id: string,
    interaction: CommandInteraction
  ) {
    await interaction.deferReply({
      ephemeral: true
    })

    const tickets = await this.ticketService.getListByUnknownId({ id })
    if (!tickets.length) {
      return interaction.followUp({
        content: `–¢–∏–∫–µ—Ç—ã —Å id ${id} –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω—ã`
      })
    }

    const by = {
      channel: tickets.every((t) => t.channelId === id),
      user: tickets.every((t) => t.userId === id)
    }
    const threads = (await interaction.guild!.channels.fetchActiveThreads()).threads

    const embed = new EmbedBuilder()
      .setDescription(
        tickets.length > 1
          ? '–°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤'
          : '–¢–∏–∫–µ—Ç' +
              (by.user
                ? ` ${
                    interaction.guild?.members.cache.get(id) ? '—É—á–∞—Å—Ç–Ω–∏–∫–∞' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                  } ${userMention(id)}`
                : by.channel
                ? ` –≤ –∫–∞–Ω–∞–ª–µ ${channelMention(id)}`
                : '')
      )
      .setColor(Color.Yellow)

    for (const ticket of tickets) {
      embed.addFields({
        value: `${channelMention(ticket.channelId)} ${
          by.user ? '' : userMention(ticket.userId)
        } ${timestamp(ticket.createdAt)}`.trim(),
        name: `${ticket.id} (${threads.get(id) ? ACTIVE : CLOSED})`
      })
    }

    await interaction.followUp({ embeds: [embed] })
  }

  @Slash({
    description: '–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç',
    name: 'close'
  })
  public async close(
    @SlashOption({
      autocomplete: (i) => ticketAutocomplete(i, { returnChannel: true }),
      description: 'ID —Ç–∏–∫–µ—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π)',
      type: ApplicationCommandOptionType.String,
      required: false,
      name: 'id'
    })
    id: string | null,
    @SlashOption({
      type: ApplicationCommandOptionType.String,
      description: '–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è',
      required: false,
      name: 'reason'
    })
    reason: string | null,
    interaction: CommandInteraction
  ) {
    await interaction.deferReply({
      ephemeral: true
    })

    const channel = (await interaction.guild?.channels.fetch(
      id || interaction.channelId
    )) as ThreadChannel

    if (!channel || !channel.isTextBased()) {
      return interaction.followUp({
        content: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π'
      })
    }

    const ticket = await this.ticketService.getOne({
      channelId: channel.id
    })

    if (!ticket) {
      throw new Error('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω')
    }

    await this.ticketService.close({
      id: ticket.id
    })

    const embed = new EmbedBuilder()
      .setTitle('–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞')
      .setFields(
        {
          value: userMention(ticket.userId),
          name: '–ó–∞–∫—Ä—ã–ª'
        },
        {
          value: codeBlock(reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
          name: '–ü—Ä–∏—á–∏–Ω–∞'
        }
      )
      .setColor(Color.Red)
      .setFooter({
        iconURL: (await interaction.guild?.members.fetch(interaction.user.id))?.displayAvatarURL(),
        text: ticket.id
      })

    await channel.send({ embeds: [embed] })
    channel.setLocked(true)
    channel.setArchived(true)
    interaction.followUp({ content: '–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç' })
  }

  @Slash({
    description: '–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç',
    name: 'reopen'
  })
  public async reopen(
    @SlashOption({
      autocomplete: (i) => ticketAutocomplete(i, { returnChannel: true, closed: true }),
      description: 'ID —Ç–∏–∫–µ—Ç–∞ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π)',
      type: ApplicationCommandOptionType.String,
      required: false,
      name: 'id'
    })
    id: string | null,
    @SlashOption({
      type: ApplicationCommandOptionType.String,
      description: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è',
      required: false,
      name: 'reason'
    })
    reason: string | null,
    interaction: CommandInteraction
  ) {
    await interaction.deferReply({
      ephemeral: true
    })

    const thread = (await interaction.guild?.channels.fetch(
      id || interaction.channelId
    )) as ThreadChannel

    if (!thread || !thread.isTextBased()) {
      return interaction.followUp({
        content: '–í–µ—Ç–∫–∞ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω–∞'
      })
    }

    if (!thread.locked && !thread.archived) {
      return interaction.followUp({
        content: '–í–µ—Ç–∫–∞ –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞'
      })
    }

    const ticket = await this.ticketService.getOne({
      channelId: thread.id
    })

    if (!ticket) {
      throw new Error('–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω')
    }

    await this.ticketService.reopen({
      id: ticket.id
    })

    const embed = new EmbedBuilder()
      .setTitle('–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞')
      .setFields(
        {
          value: userMention(ticket.userId),
          name: '–û—Ç–∫—Ä—ã–ª'
        },
        {
          value: codeBlock(reason || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
          name: '–ü—Ä–∏—á–∏–Ω–∞'
        }
      )
      .setColor(Color.Green)
      .setFooter({
        iconURL: (await interaction.guild?.members.fetch(interaction.user.id))?.displayAvatarURL(),
        text: ticket.id
      })

    await thread.send({ embeds: [embed] })
    thread.setLocked(false)
    thread.setArchived(false)
    interaction.followUp({ content: '–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç' })
  }
}
